$date
    May  8, 2018  18:23:08
$end
$version
    TOOL:	ncsim	15.20-s039
$end
$timescale
    10 ps
$end

$scope module SingleCycle_tb $end
$var reg       1 !    clk  $end
$var reg       1 "    rst_n  $end
$var wire     32 #    IR_addr [31:0] $end
$var wire     32 $    IR [31:0] $end
$var wire     32 %    RF_writedata [31:0] $end
$var wire      1 &    ReadDataMem [31] $end
$var wire      1 '    ReadDataMem [30] $end
$var wire      1 (    ReadDataMem [29] $end
$var wire      1 )    ReadDataMem [28] $end
$var wire      1 *    ReadDataMem [27] $end
$var wire      1 +    ReadDataMem [26] $end
$var wire      1 ,    ReadDataMem [25] $end
$var wire      1 -    ReadDataMem [24] $end
$var wire      1 .    ReadDataMem [23] $end
$var wire      1 /    ReadDataMem [22] $end
$var wire      1 0    ReadDataMem [21] $end
$var wire      1 1    ReadDataMem [20] $end
$var wire      1 2    ReadDataMem [19] $end
$var wire      1 3    ReadDataMem [18] $end
$var wire      1 4    ReadDataMem [17] $end
$var wire      1 5    ReadDataMem [16] $end
$var wire      1 6    ReadDataMem [15] $end
$var wire      1 7    ReadDataMem [14] $end
$var wire      1 8    ReadDataMem [13] $end
$var wire      1 9    ReadDataMem [12] $end
$var wire      1 :    ReadDataMem [11] $end
$var wire      1 ;    ReadDataMem [10] $end
$var wire      1 <    ReadDataMem [9] $end
$var wire      1 =    ReadDataMem [8] $end
$var wire      1 >    ReadDataMem [7] $end
$var wire      1 ?    ReadDataMem [6] $end
$var wire      1 @    ReadDataMem [5] $end
$var wire      1 A    ReadDataMem [4] $end
$var wire      1 B    ReadDataMem [3] $end
$var wire      1 C    ReadDataMem [2] $end
$var wire      1 D    ReadDataMem [1] $end
$var wire      1 E    ReadDataMem [0] $end
$var wire      1 F    CEN  $end
$var wire      1 G    WEN  $end
$var wire      1 H    A [6] $end
$var wire      1 I    A [5] $end
$var wire      1 J    A [4] $end
$var wire      1 K    A [3] $end
$var wire      1 L    A [2] $end
$var wire      1 M    A [1] $end
$var wire      1 N    A [0] $end
$var wire      1 O    ReadData2 [31] $end
$var wire      1 P    ReadData2 [30] $end
$var wire      1 Q    ReadData2 [29] $end
$var wire      1 R    ReadData2 [28] $end
$var wire      1 S    ReadData2 [27] $end
$var wire      1 T    ReadData2 [26] $end
$var wire      1 U    ReadData2 [25] $end
$var wire      1 V    ReadData2 [24] $end
$var wire      1 W    ReadData2 [23] $end
$var wire      1 X    ReadData2 [22] $end
$var wire      1 Y    ReadData2 [21] $end
$var wire      1 Z    ReadData2 [20] $end
$var wire      1 [    ReadData2 [19] $end
$var wire      1 \    ReadData2 [18] $end
$var wire      1 ]    ReadData2 [17] $end
$var wire      1 ^    ReadData2 [16] $end
$var wire      1 _    ReadData2 [15] $end
$var wire      1 `    ReadData2 [14] $end
$var wire      1 a    ReadData2 [13] $end
$var wire      1 b    ReadData2 [12] $end
$var wire      1 c    ReadData2 [11] $end
$var wire      1 d    ReadData2 [10] $end
$var wire      1 e    ReadData2 [9] $end
$var wire      1 f    ReadData2 [8] $end
$var wire      1 g    ReadData2 [7] $end
$var wire      1 h    ReadData2 [6] $end
$var wire      1 i    ReadData2 [5] $end
$var wire      1 j    ReadData2 [4] $end
$var wire      1 k    ReadData2 [3] $end
$var wire      1 l    ReadData2 [2] $end
$var wire      1 m    ReadData2 [1] $end
$var wire      1 n    ReadData2 [0] $end
$var wire      1 o    OEN  $end
$var integer  32 p    error_cnt  $end
$var integer  32 q    i  $end

$scope module i_rom $end
$var wire      7 r    addr [6:0] $end
$var reg      32 s    data [31:0] $end
$var integer  32 t    i  $end
$upscope $end


$scope module i_MIPS $end
$var wire      1 u    clk  $end
$var wire      1 v    rst_n  $end
$var wire     32 $    IR [31:0] $end
$var wire     32 #    IR_addr [31:0] $end
$var wire     32 %    RF_writedata [31:0] $end
$var wire      1 &    ReadDataMem [31] $end
$var wire      1 '    ReadDataMem [30] $end
$var wire      1 (    ReadDataMem [29] $end
$var wire      1 )    ReadDataMem [28] $end
$var wire      1 *    ReadDataMem [27] $end
$var wire      1 +    ReadDataMem [26] $end
$var wire      1 ,    ReadDataMem [25] $end
$var wire      1 -    ReadDataMem [24] $end
$var wire      1 .    ReadDataMem [23] $end
$var wire      1 /    ReadDataMem [22] $end
$var wire      1 0    ReadDataMem [21] $end
$var wire      1 1    ReadDataMem [20] $end
$var wire      1 2    ReadDataMem [19] $end
$var wire      1 3    ReadDataMem [18] $end
$var wire      1 4    ReadDataMem [17] $end
$var wire      1 5    ReadDataMem [16] $end
$var wire      1 6    ReadDataMem [15] $end
$var wire      1 7    ReadDataMem [14] $end
$var wire      1 8    ReadDataMem [13] $end
$var wire      1 9    ReadDataMem [12] $end
$var wire      1 :    ReadDataMem [11] $end
$var wire      1 ;    ReadDataMem [10] $end
$var wire      1 <    ReadDataMem [9] $end
$var wire      1 =    ReadDataMem [8] $end
$var wire      1 >    ReadDataMem [7] $end
$var wire      1 ?    ReadDataMem [6] $end
$var wire      1 @    ReadDataMem [5] $end
$var wire      1 A    ReadDataMem [4] $end
$var wire      1 B    ReadDataMem [3] $end
$var wire      1 C    ReadDataMem [2] $end
$var wire      1 D    ReadDataMem [1] $end
$var wire      1 E    ReadDataMem [0] $end
$var wire      1 F    CEN  $end
$var wire      1 G    WEN  $end
$var wire      1 H    A [6] $end
$var wire      1 I    A [5] $end
$var wire      1 J    A [4] $end
$var wire      1 K    A [3] $end
$var wire      1 L    A [2] $end
$var wire      1 M    A [1] $end
$var wire      1 N    A [0] $end
$var wire      1 O    ReadData2 [31] $end
$var wire      1 P    ReadData2 [30] $end
$var wire      1 Q    ReadData2 [29] $end
$var wire      1 R    ReadData2 [28] $end
$var wire      1 S    ReadData2 [27] $end
$var wire      1 T    ReadData2 [26] $end
$var wire      1 U    ReadData2 [25] $end
$var wire      1 V    ReadData2 [24] $end
$var wire      1 W    ReadData2 [23] $end
$var wire      1 X    ReadData2 [22] $end
$var wire      1 Y    ReadData2 [21] $end
$var wire      1 Z    ReadData2 [20] $end
$var wire      1 [    ReadData2 [19] $end
$var wire      1 \    ReadData2 [18] $end
$var wire      1 ]    ReadData2 [17] $end
$var wire      1 ^    ReadData2 [16] $end
$var wire      1 _    ReadData2 [15] $end
$var wire      1 `    ReadData2 [14] $end
$var wire      1 a    ReadData2 [13] $end
$var wire      1 b    ReadData2 [12] $end
$var wire      1 c    ReadData2 [11] $end
$var wire      1 d    ReadData2 [10] $end
$var wire      1 e    ReadData2 [9] $end
$var wire      1 f    ReadData2 [8] $end
$var wire      1 g    ReadData2 [7] $end
$var wire      1 h    ReadData2 [6] $end
$var wire      1 i    ReadData2 [5] $end
$var wire      1 j    ReadData2 [4] $end
$var wire      1 k    ReadData2 [3] $end
$var wire      1 l    ReadData2 [2] $end
$var wire      1 m    ReadData2 [1] $end
$var wire      1 n    ReadData2 [0] $end
$var wire      1 o    OEN  $end
$var wire     26 w    Inst_25_0 [25:0] $end
$var wire      5 x    Inst_25_21 [4:0] $end
$var wire      5 y    Inst_20_16 [4:0] $end
$var wire      5 z    Inst_15_11 [4:0] $end
$var wire     16 {    Inst_15_0 [15:0] $end
$var wire     32 |    shamt [31:0] $end
$var wire     32 }    pc [31:0] $end
$var wire      6 ~    opcode [5:0] $end
$var wire      6 !!   func [5:0] $end
$var wire      1 "!   RegDST  $end
$var wire      1 #!   ALUSrc  $end
$var wire      1 $!   MemToReg  $end
$var wire      1 %!   RegWrite  $end
$var wire      1 $!   MemRead  $end
$var wire      1 &!   MemWrite  $end
$var wire      1 '!   Jump  $end
$var wire      1 (!   branch  $end
$var wire      1 )!   ALUzero  $end
$var wire      4 *!   ALU_Control [3:0] $end
$var wire      2 +!   ALUOp [1:0] $end
$var wire     32 ,!   ALU_Result [31:0] $end
$var wire     32 -!   ALU_datain2_src0 [31:0] $end
$var wire     32 .!   ALU_datain2 [31:0] $end
$var wire      5 /!   r_wr_addr [4:0] $end
$var wire      5 0!   r_rd_addr1 [4:0] $end
$var wire      5 1!   r_wr_addr0 [4:0] $end
$var wire     32 2!   r_wr_data [31:0] $end
$var wire     32 3!   r_rd_data1 [31:0] $end
$var wire     32 4!   r_rd_data2 [31:0] $end
$var wire     32 5!   r_wr_data0 [31:0] $end
$var wire     32 6!   pc_plus_4 [31:0] $end
$var wire      1 7!   _JAL  $end
$var wire      1 8!   _JR  $end
$var wire     32 9!   Inst_15_0_signext [31:0] $end
$var wire     32 :!   br_signext_sl2 [31:0] $end

$scope module pc_0 $end
$var wire      1 u    clk  $end
$var wire      1 v    rst  $end
$var wire     32 :!   br_signextend_sl2 [31:0] $end
$var wire     26 w    Inst_25_0 [25:0] $end
$var wire      1 '!   Jump  $end
$var wire      1 (!   branch  $end
$var wire      1 )!   ALUzero  $end
$var wire      1 8!   _JR  $end
$var wire     32 3!   r_rd_data1 [31:0] $end
$var wire     32 }    pc [31:0] $end
$var wire     32 6!   pc_plus_4 [31:0] $end
$var reg      32 ;!   pc_val [31:0] $end
$var wire     32 <!   br_loc [31:0] $end
$var wire     32 =!   pc_plus_8 [31:0] $end
$var wire      1 >!   branch_EN  $end
$var wire      1 ?!   Inst_25_21  $end
$upscope $end


$scope module Control_Unit_0 $end
$var wire      6 ~    opcode [5:0] $end
$var wire      6 !!   func [5:0] $end
$var wire      1 "!   RegDST  $end
$var wire      1 '!   Jump  $end
$var wire      1 (!   Branch  $end
$var wire      1 $!   MemRead  $end
$var wire      1 $!   MemToReg  $end
$var reg       2 @!   ALUOp [1:0] $end
$var wire      1 &!   MemWrite  $end
$var wire      1 #!   ALUSrc  $end
$var wire      1 %!   RegWrite  $end
$var wire      1 7!   _JAL  $end
$var wire      1 8!   _JR  $end
$upscope $end


$scope module register_0 $end
$var wire      1 u    clk  $end
$var wire      1 v    rst  $end
$var wire      1 %!   RegWrite  $end
$var wire      5 x    Reg_R1 [4:0] $end
$var wire      5 y    Reg_R2 [4:0] $end
$var wire      5 /!   Reg_W [4:0] $end
$var wire     32 2!   WriteData [31:0] $end
$var wire     32 3!   ReadData1 [31:0] $end
$var wire     32 4!   ReadData2 [31:0] $end
$upscope $end


$scope module ALUControl_0 $end
$var reg       4 A!   ALUctrl [3:0] $end
$var wire      2 +!   ALUOp [1:0] $end
$var wire      6 !!   ALU_CtrlIn [5:0] $end
$upscope $end


$scope module ALU_0 $end
$var wire     32 3!   ALUin1 [31:0] $end
$var wire     32 .!   ALUin2 [31:0] $end
$var wire      4 *!   ALUctrl [3:0] $end
$var wire      1 )!   ALUzero  $end
$var reg      32 B!   ALUresult [31:0] $end
$upscope $end


$scope module signextend_0 $end
$var wire     16 {    in [15:0] $end
$var wire     32 9!   out [31:0] $end
$var reg      32 C!   ext [31:0] $end
$upscope $end


$scope module br_lshift_0 $end
$var wire     32 9!   in [31:0] $end
$var wire     32 :!   out [31:0] $end
$var reg      32 D!   shift [31:0] $end
$upscope $end


$scope module MUX_RegDST $end
$var wire      5 y    in0 [4:0] $end
$var wire      5 z    in1 [4:0] $end
$var wire      1 "!   sel  $end
$var reg       5 E!   out [4:0] $end
$upscope $end


$scope module MUX_RegDST_1 $end
$var wire      5 1!   in0 [4:0] $end
$var wire      5 F!   in1 [4:0] $end
$var wire      1 7!   sel  $end
$var reg       5 G!   out [4:0] $end
$upscope $end


$scope module MUX_Src $end
$var wire     32 4!   in0 [31:0] $end
$var wire     32 9!   in1 [31:0] $end
$var wire      1 #!   sel  $end
$var reg      32 H!   out [31:0] $end
$upscope $end


$scope module MUX_MemToReg $end
$var wire     32 ,!   in0 [31:0] $end
$var wire      1 &    in1 [31] $end
$var wire      1 '    in1 [30] $end
$var wire      1 (    in1 [29] $end
$var wire      1 )    in1 [28] $end
$var wire      1 *    in1 [27] $end
$var wire      1 +    in1 [26] $end
$var wire      1 ,    in1 [25] $end
$var wire      1 -    in1 [24] $end
$var wire      1 .    in1 [23] $end
$var wire      1 /    in1 [22] $end
$var wire      1 0    in1 [21] $end
$var wire      1 1    in1 [20] $end
$var wire      1 2    in1 [19] $end
$var wire      1 3    in1 [18] $end
$var wire      1 4    in1 [17] $end
$var wire      1 5    in1 [16] $end
$var wire      1 6    in1 [15] $end
$var wire      1 7    in1 [14] $end
$var wire      1 8    in1 [13] $end
$var wire      1 9    in1 [12] $end
$var wire      1 :    in1 [11] $end
$var wire      1 ;    in1 [10] $end
$var wire      1 <    in1 [9] $end
$var wire      1 =    in1 [8] $end
$var wire      1 >    in1 [7] $end
$var wire      1 ?    in1 [6] $end
$var wire      1 @    in1 [5] $end
$var wire      1 A    in1 [4] $end
$var wire      1 B    in1 [3] $end
$var wire      1 C    in1 [2] $end
$var wire      1 D    in1 [1] $end
$var wire      1 E    in1 [0] $end
$var wire      1 $!   sel  $end
$var reg      32 I!   out [31:0] $end
$upscope $end


$scope module MUX_MemToReg_1 $end
$var wire     32 5!   in0 [31:0] $end
$var wire     32 6!   in1 [31:0] $end
$var wire      1 7!   sel  $end
$var reg      32 J!   out [31:0] $end
$upscope $end

$upscope $end


$scope module Data_memory $end
$var parameter 32 K!   BITS  $end
$var parameter 32 L!   word_depth  $end
$var parameter 32 M!   addr_width  $end
$var parameter 32 N!   wordx  $end
$var parameter  7 O!   addrx  $end
$var wire      1 &    Q [31] $end
$var wire      1 '    Q [30] $end
$var wire      1 (    Q [29] $end
$var wire      1 )    Q [28] $end
$var wire      1 *    Q [27] $end
$var wire      1 +    Q [26] $end
$var wire      1 ,    Q [25] $end
$var wire      1 -    Q [24] $end
$var wire      1 .    Q [23] $end
$var wire      1 /    Q [22] $end
$var wire      1 0    Q [21] $end
$var wire      1 1    Q [20] $end
$var wire      1 2    Q [19] $end
$var wire      1 3    Q [18] $end
$var wire      1 4    Q [17] $end
$var wire      1 5    Q [16] $end
$var wire      1 6    Q [15] $end
$var wire      1 7    Q [14] $end
$var wire      1 8    Q [13] $end
$var wire      1 9    Q [12] $end
$var wire      1 :    Q [11] $end
$var wire      1 ;    Q [10] $end
$var wire      1 <    Q [9] $end
$var wire      1 =    Q [8] $end
$var wire      1 >    Q [7] $end
$var wire      1 ?    Q [6] $end
$var wire      1 @    Q [5] $end
$var wire      1 A    Q [4] $end
$var wire      1 B    Q [3] $end
$var wire      1 C    Q [2] $end
$var wire      1 D    Q [1] $end
$var wire      1 E    Q [0] $end
$var wire      1 P!   CLK  $end
$var wire      1 F    CEN  $end
$var wire      1 G    WEN  $end
$var wire      1 H    A [6] $end
$var wire      1 I    A [5] $end
$var wire      1 J    A [4] $end
$var wire      1 K    A [3] $end
$var wire      1 L    A [2] $end
$var wire      1 M    A [1] $end
$var wire      1 N    A [0] $end
$var wire      1 O    D [31] $end
$var wire      1 P    D [30] $end
$var wire      1 Q    D [29] $end
$var wire      1 R    D [28] $end
$var wire      1 S    D [27] $end
$var wire      1 T    D [26] $end
$var wire      1 U    D [25] $end
$var wire      1 V    D [24] $end
$var wire      1 W    D [23] $end
$var wire      1 X    D [22] $end
$var wire      1 Y    D [21] $end
$var wire      1 Z    D [20] $end
$var wire      1 [    D [19] $end
$var wire      1 \    D [18] $end
$var wire      1 ]    D [17] $end
$var wire      1 ^    D [16] $end
$var wire      1 _    D [15] $end
$var wire      1 `    D [14] $end
$var wire      1 a    D [13] $end
$var wire      1 b    D [12] $end
$var wire      1 c    D [11] $end
$var wire      1 d    D [10] $end
$var wire      1 e    D [9] $end
$var wire      1 f    D [8] $end
$var wire      1 g    D [7] $end
$var wire      1 h    D [6] $end
$var wire      1 i    D [5] $end
$var wire      1 j    D [4] $end
$var wire      1 k    D [3] $end
$var wire      1 l    D [2] $end
$var wire      1 m    D [1] $end
$var wire      1 n    D [0] $end
$var wire      1 o    OEN  $end
$var reg       1 Q!   NOT_CEN  $end
$var reg       1 R!   NOT_WEN  $end
$var reg       1 S!   NOT_A0  $end
$var reg       1 T!   NOT_A1  $end
$var reg       1 U!   NOT_A2  $end
$var reg       1 V!   NOT_A3  $end
$var reg       1 W!   NOT_A4  $end
$var reg       1 X!   NOT_A5  $end
$var reg       1 Y!   NOT_A6  $end
$var reg       7 Z!   NOT_A [6:0] $end
$var reg       1 [!   NOT_D0  $end
$var reg       1 \!   NOT_D1  $end
$var reg       1 ]!   NOT_D2  $end
$var reg       1 ^!   NOT_D3  $end
$var reg       1 _!   NOT_D4  $end
$var reg       1 `!   NOT_D5  $end
$var reg       1 a!   NOT_D6  $end
$var reg       1 b!   NOT_D7  $end
$var reg       1 c!   NOT_D8  $end
$var reg       1 d!   NOT_D9  $end
$var reg       1 e!   NOT_D10  $end
$var reg       1 f!   NOT_D11  $end
$var reg       1 g!   NOT_D12  $end
$var reg       1 h!   NOT_D13  $end
$var reg       1 i!   NOT_D14  $end
$var reg       1 j!   NOT_D15  $end
$var reg       1 k!   NOT_D16  $end
$var reg       1 l!   NOT_D17  $end
$var reg       1 m!   NOT_D18  $end
$var reg       1 n!   NOT_D19  $end
$var reg       1 o!   NOT_D20  $end
$var reg       1 p!   NOT_D21  $end
$var reg       1 q!   NOT_D22  $end
$var reg       1 r!   NOT_D23  $end
$var reg       1 s!   NOT_D24  $end
$var reg       1 t!   NOT_D25  $end
$var reg       1 u!   NOT_D26  $end
$var reg       1 v!   NOT_D27  $end
$var reg       1 w!   NOT_D28  $end
$var reg       1 x!   NOT_D29  $end
$var reg       1 y!   NOT_D30  $end
$var reg       1 z!   NOT_D31  $end
$var reg      32 {!   NOT_D [31:0] $end
$var reg       1 |!   NOT_CLK_PER  $end
$var reg       1 }!   NOT_CLK_MINH  $end
$var reg       1 ~!   NOT_CLK_MINL  $end
$var reg       1 !"   LAST_NOT_CEN  $end
$var reg       1 ""   LAST_NOT_WEN  $end
$var reg       7 #"   LAST_NOT_A [6:0] $end
$var reg      32 $"   LAST_NOT_D [31:0] $end
$var reg       1 %"   LAST_NOT_CLK_PER  $end
$var reg       1 &"   LAST_NOT_CLK_MINH  $end
$var reg       1 '"   LAST_NOT_CLK_MINL  $end
$var wire      1 ("   _Q [31] $end
$var wire      1 )"   _Q [30] $end
$var wire      1 *"   _Q [29] $end
$var wire      1 +"   _Q [28] $end
$var wire      1 ,"   _Q [27] $end
$var wire      1 -"   _Q [26] $end
$var wire      1 ."   _Q [25] $end
$var wire      1 /"   _Q [24] $end
$var wire      1 0"   _Q [23] $end
$var wire      1 1"   _Q [22] $end
$var wire      1 2"   _Q [21] $end
$var wire      1 3"   _Q [20] $end
$var wire      1 4"   _Q [19] $end
$var wire      1 5"   _Q [18] $end
$var wire      1 6"   _Q [17] $end
$var wire      1 7"   _Q [16] $end
$var wire      1 8"   _Q [15] $end
$var wire      1 9"   _Q [14] $end
$var wire      1 :"   _Q [13] $end
$var wire      1 ;"   _Q [12] $end
$var wire      1 <"   _Q [11] $end
$var wire      1 ="   _Q [10] $end
$var wire      1 >"   _Q [9] $end
$var wire      1 ?"   _Q [8] $end
$var wire      1 @"   _Q [7] $end
$var wire      1 A"   _Q [6] $end
$var wire      1 B"   _Q [5] $end
$var wire      1 C"   _Q [4] $end
$var wire      1 D"   _Q [3] $end
$var wire      1 E"   _Q [2] $end
$var wire      1 F"   _Q [1] $end
$var wire      1 G"   _Q [0] $end
$var wire      1 H"   _OENi  $end
$var wire      7 I"   _A [6:0] $end
$var wire      1 J"   _CLK  $end
$var wire      1 K"   _CEN  $end
$var wire      1 L"   _OEN  $end
$var wire      1 M"   _WEN  $end
$var wire     32 N"   _D [31:0] $end
$var wire      1 O"   re_flag  $end
$var wire      1 P"   re_data_flag  $end
$var reg       1 Q"   LATCHED_CEN  $end
$var reg       1 R"   LATCHED_WEN  $end
$var reg       7 S"   LATCHED_A [6:0] $end
$var reg      32 T"   LATCHED_D [31:0] $end
$var reg       1 U"   CENi  $end
$var reg       1 V"   WENi  $end
$var reg       7 W"   Ai [6:0] $end
$var reg      32 X"   Di [31:0] $end
$var reg      32 Y"   Qi [31:0] $end
$var reg      32 Z"   LAST_Qi [31:0] $end
$var reg       1 ["   LAST_CLK  $end

$scope task x_inputs $end
$var integer  32 \"   n  $end
$upscope $end


$scope task read_mem $end
$var reg       1 ]"   r_wb  $end
$var reg       1 ^"   xflag  $end
$upscope $end


$scope task write_mem $end
$var reg       7 _"   a [6:0] $end
$var reg      32 `"   d [31:0] $end
$upscope $end


$scope task write_mem_x $end
$var reg       7 a"   a [6:0] $end
$upscope $end


$scope task x_mem $end
$var integer  32 b"   n  $end
$upscope $end


$scope function valid_address $end
$var reg       1 c"   valid_address  $end
$var reg       7 d"   a [6:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
bx O!
bx N!
b111 M!
b10000000 L!
b100000 K!
0!
1"
bx #
bx $
bx %
x&
x'
x(
x)
x*
x+
x,
x-
x.
x/
x0
x1
x2
x3
x4
x5
x6
x7
x8
x9
x:
x;
x<
x=
x>
x?
x@
xA
xB
xC
xD
xE
xF
xG
xH
xI
xJ
xK
xL
xM
xN
xO
xP
xQ
xR
xS
xT
xU
xV
xW
xX
xY
xZ
x[
x\
x]
x^
x_
x`
xa
xb
xc
xd
xe
xf
xg
xh
xi
xj
xk
xl
xm
xn
0o
b0 p
bx q
bx r
bx s
bx t
0u
1v
bx w
bx x
bx y
bx z
bx {
b0xxxxx |
bx }
bx ~
bx !!
x"!
x#!
x$!
x%!
x&!
x'!
x(!
x)!
bx *!
bx +!
bx ,!
bz -!
bx .!
bx /!
bz 0!
bx 1!
bx 2!
bx 3!
bx 4!
bx 5!
bx 6!
x7!
x8!
bx 9!
bx :!
bx ;!
bx <!
bx =!
x>!
x?!
bx @!
bx A!
bx B!
bx C!
bx D!
bx E!
b11111 F!
bx G!
bx H!
bx I!
bx J!
1P!
xQ!
xR!
xS!
xT!
xU!
xV!
xW!
xX!
xY!
bx Z!
x[!
x\!
x]!
x^!
x_!
x`!
xa!
xb!
xc!
xd!
xe!
xf!
xg!
xh!
xi!
xj!
xk!
xl!
xm!
xn!
xo!
xp!
xq!
xr!
xs!
xt!
xu!
xv!
xw!
xx!
xy!
xz!
bx {!
x|!
x}!
x~!
x!"
x""
bx #"
bx $"
x%"
x&"
x'"
x("
x)"
x*"
x+"
x,"
x-"
x."
x/"
x0"
x1"
x2"
x3"
x4"
x5"
x6"
x7"
x8"
x9"
x:"
x;"
x<"
x="
x>"
x?"
x@"
xA"
xB"
xC"
xD"
xE"
xF"
xG"
0H"
bx I"
1J"
xK"
0L"
xM"
bx N"
xO"
xP"
xQ"
xR"
bx S"
bx T"
xU"
xV"
bx W"
bx X"
bx Y"
bx Z"
1["
bx \"
x]"
x^"
bx _"
bx `"
bx a"
bx b"
xc"
bx d"
$end
#200
0"
0v
b0 ;!
b1000 =!
b100 6!
b0 }
b0 #
b0 r
b10001100000010000000000000000000 s
b10001100000010000000000000000000 $
b0 |
b0 {
b0 z
b1000 y
b0 x
b10000000000000000000 w
b0 !!
b100011 ~
bx0000000000000000 C!
b0 C!
b1000 E!
b1111 A!
b0 @!
0F
07!
0(!
0'!
0&!
1$!
1#!
0"!
b0 +!
08!
1%!
b1111 *!
0?!
b0 3!
b0 4!
b1000 1!
b0 9!
1G
0>!
0K"
1O"
1M"
0P"
b1000 G!
b0 H!
b10 A!
b0 B!
b0 D!
b0 :!
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
b0 ,!
0)!
b10 *!
b0 .!
b1000 /!
0H
0I
0J
0K
0L
0M
0N
b0 N"
b100 <!
b0 I"
#500
1!
0P!
1u
0J"
0["
#1000
0!
1P!
0u
1J"
b0 S"
b0 T"
1R"
0Q"
0U"
1V"
b0 W"
b0 X"
1]"
0^"
b0 d"
1c"
b1111 Y"
1["
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
1D"
1E"
1F"
1G"
#1100
1E
1D
1C
1B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
b1111 I!
b1111 5!
b1111 J!
b1111 2!
b1111 %
#1500
1!
0P!
1u
0J"
0["
#1700
1"
1v
#2000
0!
1P!
0u
1J"
b1111 Z"
1["
#2500
1!
0P!
1u
0J"
b100 ;!
0["
b1100 =!
b1000 6!
b1111 4!
b100 }
b100 #
1k
1l
1m
1n
b1000 <!
b1111 N"
b1 r
b10001100000010010000000000000100 s
b10001100000010010000000000000100 $
b100 {
b1001 y
b10010000000000000100 w
b100 !!
b100 C!
b1001 E!
b0 4!
b1001 1!
b100 9!
b100 H!
b1001 G!
b10000 D!
b10000 :!
b1001 /!
0k
0l
0m
0n
b100 .!
b100 B!
b100 ,!
b0 N"
b11000 <!
1N
b1 I"
#3000
0!
1P!
0u
1J"
b1 S"
b1 W"
b1 d"
b10100 Y"
1["
1C"
0D"
0F"
0G"
#3100
0E
0D
0B
1A
b10100 I!
b10100 5!
b10100 J!
b10100 2!
b10100 %
#3500
1!
0P!
1u
0J"
b1000 ;!
0["
b10000 =!
b1100 6!
b10100 4!
b1000 }
b1000 #
1j
1l
b11100 <!
b10100 N"
b10 r
b1000010000100000000100000 s
b1000010000100000000100000 $
b100000000100000 {
b1000 z
b1000 y
b1000 x
b1000010000100000000100000 w
b100000 !!
b0 ~
b100000000100000 C!
b1000 E!
b10 @!
1F
0$!
0#!
1"!
b10 +!
b1111 3!
b1111 4!
b1000 1!
b100000000100000 9!
1K"
0O"
b100 I!
b1111 H!
b10011 B!
b1000 G!
b10000000010000000 D!
b10000000010000000 :!
b1000 /!
0j
1k
1m
1n
b10011 ,!
b1111 .!
b100 5!
b10011 I!
b11110 B!
b100 J!
b100 2!
b11110 ,!
b10011 5!
1L
0N
b1111 N"
b10000000010001100 <!
b11110 I!
b10011 J!
b100 I"
b10011 2!
b11110 5!
1M
1N
b100 %
b11110 J!
b111 I"
b11110 2!
b10011 %
b11110 %
#4000
0!
1P!
0u
1J"
b111 S"
b1111 T"
1Q"
b10100 Z"
1U"
b111 W"
b1111 X"
1["
#4500
1!
0P!
1u
0J"
b1100 ;!
0["
b10100 =!
b10000 6!
b11110 4!
b11110 3!
b1100 }
b11110 H!
b101101 B!
b1100 #
b101101 ,!
1j
0n
b11110 .!
b10000000010010000 <!
b101101 I!
b111100 B!
b111100 ,!
b11110 N"
b101101 5!
1K
0L
b11 r
b111100 I!
b101101 J!
b1000010010101000000100010 s
b1000010010101000000100010 $
b1011 I"
b101101 2!
b111100 5!
1L
b111100 J!
b1111 I"
b111100 2!
b101101 %
b101000000100010 {
b1010 z
b1001 y
b1000010010101000000100010 w
b100010 !!
b101000000100010 C!
b1010 E!
b110 A!
b110 *!
b10100 4!
b1010 1!
b101000000100010 9!
b111100 %
b0 B!
b10100 H!
b1010 G!
b10100000010001000 D!
1)!
b10100000010001000 :!
b1010 /!
0k
0m
b10100 .!
b0 ,!
b1010 B!
b0 I!
0)!
b0 5!
0K
0L
0M
0N
b1010 ,!
b10100 N"
b10100000010011000 <!
b0 J!
b1010 I!
b1010 5!
1M
b0 I"
b0 2!
b1010 J!
b0 %
b10 I"
b1010 2!
b1010 %
#5000
0!
1P!
0u
1J"
b10 S"
b10100 T"
b10 W"
b10100 X"
1["
#5500
1!
0P!
1u
0J"
b10000 ;!
0["
b11000 =!
b10100 6!
b10000 }
b10000 #
b10100000010011100 <!
b100 r
b1000010010101100000100100 s
b1000010010101100000100100 $
b101100000100100 {
b1011 z
b1000010010101100000100100 w
b100100 !!
b101100000100100 C!
b1011 E!
b0 A!
b0 *!
b1011 1!
b101100000100100 9!
b10100 B!
b1011 G!
b10110000010010000 D!
b10110000010010000 :!
b1011 /!
b10100 ,!
b10100 I!
b10100 5!
1L
0M
1N
b10110000010100100 <!
b10100 J!
b101 I"
b10100 2!
b10100 %
#6000
0!
1P!
0u
1J"
b101 S"
b101 W"
1["
#6500
1!
0P!
1u
0J"
b10100 ;!
0["
b11100 =!
b11000 6!
b10100 }
b10100 #
b10110000010101000 <!
b101 r
b10001000010100000000000001100 s
b10001000010100000000000001100 $
b1100 {
b0 z
b1010 y
b1000010100000000000001100 w
b1100 !!
b100 ~
b1100 C!
b0 E!
b1111 A!
b1 @!
0F
1(!
0"!
b1 +!
0%!
b1111 *!
b1010 4!
b0 1!
b1100 9!
0K"
1O"
b1010 E!
b110 A!
b0 B!
b1010 H!
b0 G!
b110000 D!
b110000 :!
b0 /!
0j
1k
0l
1m
b1010 .!
b0 ,!
b110 *!
b1010 1!
b10100 B!
b0 I!
b1010 G!
b1010 /!
b0 5!
0L
0N
b10100 ,!
b1010 N"
b1001000 <!
b0 J!
b10100 I!
b10100 5!
1L
1N
b0 I"
b0 2!
b10100 J!
b0 %
b101 I"
b10100 2!
b10100 %
#7000
0!
1P!
0u
1J"
b1010 T"
0Q"
0U"
b1010 X"
b101 d"
b0 Y"
1["
0C"
0E"
#7100
0C
0A
#7500
1!
0P!
1u
0J"
b11000 ;!
0["
b100000 =!
b11100 6!
b11000 }
b11000 #
b1001100 <!
b110 r
b1000010010110000000100101 s
b1000010010110000000100101 $
b110000000100101 {
b1100 z
b1001 y
b1000010010110000000100101 w
b100101 !!
b0 ~
b110000000100101 C!
b1001 E!
b10 @!
1F
0(!
1"!
b10 +!
1%!
b10100 4!
b1001 1!
b110000000100101 9!
1K"
0O"
b1100 E!
b1 A!
b10100 H!
b1001 G!
b11000000010010100 D!
b11000000010010100 :!
b1001 /!
1j
0k
1l
0m
b10100 .!
b1 *!
b1100 1!
b11110 B!
b1100 G!
b1100 /!
b11110 ,!
b10100 N"
b11000000010110000 <!
b11110 I!
b11110 5!
1M
b11110 J!
b111 I"
b11110 2!
b11110 %
#8000
0!
1P!
0u
1J"
b111 S"
b10100 T"
1Q"
b0 Z"
1U"
b111 W"
b10100 X"
1["
#8500
1!
0P!
1u
0J"
b11100 ;!
0["
b100100 =!
b100000 6!
b11100 }
b11100 #
b11000000010110100 <!
b111 r
b1011011000110100000101010 s
b1011011000110100000101010 $
b110100000101010 {
b1101 z
b1100 y
b1011 x
b1011011000110100000101010 w
b101010 !!
b110100000101010 C!
b1101 E!
b111 A!
b111 *!
1?!
b10100 3!
b11110 4!
b1101 1!
b110100000101010 9!
b0 B!
b11110 H!
b1101 G!
b11010000010101000 D!
b11010000010101000 :!
b1101 /!
1k
1m
b11110 .!
b0 ,!
b1 B!
b0 I!
b0 5!
0L
0M
0N
b1 ,!
b11110 N"
b11010000011001000 <!
b0 J!
b1 I!
b1 5!
b0 I"
b0 2!
b1 J!
b0 %
b1 2!
b1 %
#9000
0!
1P!
0u
1J"
b0 S"
b11110 T"
b0 W"
b11110 X"
1["
#9500
1!
0P!
1u
0J"
b100000 ;!
0["
b101000 =!
b100100 6!
b100000 }
b100000 #
b11010000011001100 <!
b1000 r
b10101100000011000000000000000100 s
b10101100000011000000000000000100 $
b100 {
b0 z
b0 x
b11000000000000000100 w
b100 !!
b101011 ~
b100 C!
b0 E!
b1111 A!
b0 @!
0F
1&!
1#!
0"!
b0 +!
0%!
b1111 *!
0?!
b0 3!
b0 1!
b100 9!
0G
0K"
1O"
0M"
1P"
b100 H!
b1100 E!
b10 A!
b0 B!
b0 G!
b10000 D!
b10000 :!
b0 /!
b0 ,!
b10 *!
b1100 1!
b100 .!
b0 I!
b100 B!
b1100 G!
b1100 /!
b100 ,!
b0 5!
b110100 <!
b100 I!
b0 J!
b0 2!
b100 5!
1N
b100 J!
b1 I"
b100 2!
b0 %
b100 %
#10000
0!
1P!
0u
1J"
b1 S"
0R"
0Q"
0U"
0V"
b1 W"
b1 _"
b11110 `"
b1 d"
0]"
b11110 Y"
1["
1C"
1D"
1E"
1F"
#10100
1D
1C
1B
1A
#10500
1!
0P!
1u
0J"
b100100 ;!
0["
b101100 =!
b101000 6!
b100100 }
b100100 #
b111000 <!
b1001 r
b10001100000100010000000000000100 s
b10001100000100010000000000000100 $
b10001 y
b100010000000000000100 w
b100011 ~
b10001 E!
0&!
1$!
1%!
b0 4!
b10001 1!
1G
1M"
0P"
b11110 I!
b10001 G!
b10001 /!
0j
0k
0l
0m
b11110 5!
b11110 J!
b11110 2!
b0 N"
b11110 %
#11000
0!
1P!
0u
1J"
b0 T"
1R"
b11110 Z"
1V"
b0 X"
1]"
1["
#11500
1!
0P!
1u
0J"
b101000 ;!
0["
b110000 =!
b101100 6!
b11110 4!
b101000 }
b101000 #
1j
1k
1l
1m
b111100 <!
b11110 N"
b1010 r
b1000000000000000000000001101 s
b1000000000000000000000001101 $
b1101 {
b0 y
b1101 w
b1101 !!
b10 ~
b1101 C!
b0 E!
1'!
0$!
0%!
b0 4!
b0 1!
b1101 9!
b100 I!
b1101 H!
b0 G!
b110100 D!
b110100 :!
b0 /!
0j
0k
0l
0m
b1101 .!
b100 5!
b1101 B!
b100 J!
b100 2!
b1101 ,!
b0 N"
b1100000 <!
b1101 I!
b1101 5!
1M
b100 %
b1101 J!
b11 I"
b1101 2!
b1101 %
#12000
0!
1P!
0u
1J"
b11 S"
b11 W"
b11 d"
b0 Y"
1["
0C"
0D"
0E"
0F"
#12100
0D
0C
0B
0A
#12500
1!
0P!
1u
0J"
b110100 ;!
0["
b111100 =!
b111000 6!
b110100 }
b110100 #
b1101100 <!
b1101 r
b1011010111001100000100000 s
b1011010111001100000100000 $
b1001100000100000 {
b10011 z
b1011 y
b1011 x
b1011010111001100000100000 w
b100000 !!
b0 ~
b1001100000100000 C!
b11111111111111111001100000100000 C!
b1011 E!
b10 @!
1F
0'!
0#!
1"!
b10 +!
1%!
1?!
b10100 3!
b10100 4!
b1011 1!
b11111111111111111001100000100000 9!
1K"
0O"
b10100 H!
b10011 E!
b100001 B!
b1011 G!
b11111111111111100110000010000000 D!
b11111111111111100110000010000000 :!
b1011 /!
1j
1l
b100001 ,!
b10011 1!
b10100 .!
b100001 I!
b10011 G!
b101000 B!
b101000 ,!
b10011 /!
b100001 5!
1K
0M
0N
b10100 N"
b11111111111111100110000010111000 <!
b101000 I!
b100001 J!
b1000 I"
b100001 2!
b101000 5!
1M
b101000 J!
b1010 I"
b101000 2!
b100001 %
b101000 %
#13000
0!
1P!
0u
1J"
b1010 S"
b10100 T"
1Q"
b0 Z"
1U"
b1010 W"
b10100 X"
1["
#13500
1!
0P!
1u
0J"
b111000 ;!
0["
b1000000 =!
b111100 6!
b111000 }
b111000 #
b11111111111111100110000010111100 <!
b1110 r
b1100000000000000000000001011 s
b1100000000000000000000001011 $
b1011 {
b0 z
b0 y
b0 x
b1011 w
b1011 !!
b11 ~
b11111111111111110000000000001011 C!
b1011 C!
b0 E!
b1111 A!
b0 @!
0F
17!
1'!
1#!
0"!
b0 +!
b1111 *!
0?!
b0 3!
b0 4!
b0 1!
b1011 9!
0K"
1O"
b111100 J!
b11111 G!
b1011 H!
b10 A!
b0 B!
b101100 D!
b101100 :!
0j
0l
b0 ,!
b10 *!
b1011 .!
b11111 /!
b111100 2!
b0 I!
b1011 B!
b111100 %
b1011 ,!
b0 5!
0K
0M
b0 N"
b1101000 <!
b1011 I!
b0 I"
b1011 5!
1M
b10 I"
#14000
0!
1P!
0u
1J"
b10 S"
b0 T"
0Q"
0U"
b10 W"
b0 X"
b10 d"
1["
#14500
1!
0P!
1u
0J"
b101100 ;!
0["
b110100 =!
b110000 6!
b101100 }
b110000 J!
b101100 #
b1011100 <!
b110000 2!
b110000 %
b1011 r
b1011010111001000000100000 s
b1011010111001000000100000 $
b1001000000100000 {
b10010 z
b1011 y
b1011 x
b1011010111001000000100000 w
b100000 !!
b0 ~
b1001000000100000 C!
b11111111111111111001000000100000 C!
b1011 E!
b10 @!
1F
07!
0'!
0#!
1"!
b10 +!
1?!
b10100 3!
b10100 4!
b1011 1!
b11111111111111111001000000100000 9!
1K"
0O"
b1011 J!
b1011 G!
b10100 H!
b10010 E!
b11111 B!
b11111111111111100100000010000000 D!
b11111111111111100100000010000000 :!
1j
1l
b11111 ,!
b10010 1!
b10100 .!
b1011 /!
b1011 2!
b11111 I!
b10010 G!
b101000 B!
b1011 %
b101000 ,!
b10010 /!
b11111 5!
1L
1N
b10100 N"
b11111111111111100100000010110000 <!
b101000 I!
b11111 J!
b111 I"
b11111 2!
b101000 5!
1K
0L
0N
b101000 J!
b1010 I"
b101000 2!
b11111 %
b101000 %
#15000
0!
1P!
0u
1J"
b1010 S"
b10100 T"
1Q"
1U"
b1010 W"
b10100 X"
1["
#15500
1!
0P!
1u
0J"
b110000 ;!
0["
b111000 =!
b110100 6!
b110000 }
b110000 #
b11111111111111100100000010110100 <!
b1100 r
b11111000000000000000001000 s
b11111000000000000000001000 $
b1000 {
b0 z
b0 y
b11111 x
b11111000000000000000001000 w
b1000 !!
b11111111111111110000000000001000 C!
b1000 C!
b0 E!
b1111 A!
18!
0%!
b1111 *!
b111100 3!
b0 4!
b0 1!
b1000 9!
b0 B!
b0 H!
b0 G!
b100000 D!
b100000 :!
b0 /!
0j
0l
b0 .!
b0 ,!
b0 I!
b0 5!
0K
0M
b0 N"
b1010100 <!
b0 J!
b0 I"
b0 2!
b0 %
#16000
0!
1P!
0u
1J"
b0 S"
b0 T"
b0 W"
b0 X"
1["
#16500
1!
0P!
1u
0J"
b111100 ;!
0["
b1000100 =!
b1000000 6!
b111100 }
b111100 #
b1100000 <!
b1111 r
b10010010100110000000000000010 s
b10010010100110000000000000010 $
b10 {
b10011 y
b10010 x
b10010100110000000000000010 w
b10 !!
b100 ~
b10 C!
b1 @!
0F
1(!
0"!
b1 +!
08!
0?!
b101000 3!
b101000 4!
b10 9!
0K"
1O"
b10011 E!
b110 A!
b101000 H!
b1000 D!
b1000 :!
1i
1k
b101000 .!
b110 *!
b10011 1!
b10011 G!
b10011 /!
1)!
b101000 N"
b1001000 <!
1>!
#17000
0!
1P!
0u
1J"
b101000 T"
0Q"
0U"
b101000 X"
b0 d"
b1111 Y"
1["
1D"
1E"
1F"
1G"
#17100
1E
1D
1C
1B
#17500
1!
0P!
1u
0J"
b1001000 ;!
0["
b1010000 =!
b1001100 6!
b1001000 }
b1001000 #
b1010100 <!
b10010 r
b10011100101010000000100000 s
b10011100101010000000100000 $
b1010000000100000 {
b10100 z
b10010 y
b10011 x
b10011100101010000000100000 w
b100000 !!
b0 ~
b1010000000100000 C!
b11111111111111111010000000100000 C!
b10010 E!
b10 @!
1F
0(!
1"!
b10 +!
1%!
1?!
b10010 1!
b11111111111111111010000000100000 9!
0>!
1K"
0O"
b10100 E!
b10 A!
b10010 G!
b11111111111111101000000010000000 D!
b11111111111111101000000010000000 :!
b10010 /!
b10 *!
b10100 1!
b1010000 B!
b10100 G!
b10100 /!
b1010000 ,!
0)!
b11111111111111101000000011001100 <!
b1010000 I!
b1010000 5!
1J
1L
b1010000 J!
b10100 I"
b1010000 2!
b1010000 %
#18000
0!
1P!
0u
1J"
b10100 S"
1Q"
b1111 Z"
1U"
b10100 W"
1["
#18500
